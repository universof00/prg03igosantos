/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.atividade06.view;

import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author igo2
 */
public class Vetor extends javax.swing.JFrame {

   int vet[] = new int [5];
   // Modelo de lista para armazenar os elementos do vetor e exibi-los na interface gráfica
    DefaultListModel lista = new DefaultListModel();
    
     /**
     * Construtor da classe Vetor. Inicializa a interface gráfica, define
     * o valor inicial do spinner e carrega o vetor na lista para exibição.
     */
    
    public Vetor() {
        initComponents();
        //Define o valor do spinner em 10 inicial
        spnNumEscolhido.setValue(10);
        //Inicia a lista. 
        for(int i = 0; i < vet.length; i++){
            lista.addElement("["+i+"] <=> " + vet[i]);
        }
        lstVetor.setModel(lista);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstVetor = new javax.swing.JList<>();
        btnAdicionar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        btnOrdenarDecrecente = new javax.swing.JButton();
        lblTextoVetor = new javax.swing.JLabel();
        lblTextoSelecao = new javax.swing.JLabel();
        spnNumEscolhido = new javax.swing.JSpinner();
        btnOrdenarCrescente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lstVetor.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        lstVetor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstVetorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstVetor);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 110, 160, 260));

        btnAdicionar.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdicionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, -1, -1));

        btnRemover.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });
        getContentPane().add(btnRemover, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, -1, -1));

        btnOrdenarDecrecente.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        btnOrdenarDecrecente.setText("Ordenar Decrescente");
        btnOrdenarDecrecente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarDecrecenteActionPerformed(evt);
            }
        });
        getContentPane().add(btnOrdenarDecrecente, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, 250, -1));

        lblTextoVetor.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        lblTextoVetor.setText("Vetor");
        getContentPane().add(lblTextoVetor, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, -1, -1));

        lblTextoSelecao.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        lblTextoSelecao.setText("jLabel1");
        getContentPane().add(lblTextoSelecao, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 80, -1, -1));

        spnNumEscolhido.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        getContentPane().add(spnNumEscolhido, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 100, -1));

        btnOrdenarCrescente.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        btnOrdenarCrescente.setText("Ordenar Crescente");
        btnOrdenarCrescente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarCrescenteActionPerformed(evt);
            }
        });
        getContentPane().add(btnOrdenarCrescente, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 250, -1));

        setSize(new java.awt.Dimension(498, 438));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * Método que é chamado quando o botão de adicionar é pressionado.
     * Atualiza o valor do vetor na posição selecionada com o valor do spinner,
     * e atualiza a lista na interface gráfica.
     */
    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // TODO add your handling code here:
        // Obtém o índice do elemento selecionado na lista
        int indiceVet = lstVetor.getAnchorSelectionIndex();
        
        lblTextoSelecao.setText(Integer.toString(indiceVet));
        // Atribui o valor do spinner à posição selecionada no vetor
        vet[indiceVet]= (int) spnNumEscolhido.getValue();
        //limpa todos os elementos da lista. 
        lista.removeAllElements();
        // Atualiza a lista de elementos exibida na interface gráfica
        for(int i = 0; i < vet.length; i++){
            lista.addElement("["+i+"] <=> " + vet[i]);
        }
        lstVetor.setModel(lista);
   
    }//GEN-LAST:event_btnAdicionarActionPerformed
    
    /**
     * Método chamado ao pressionar o botão de remover.
     * Remove o valor na posição selecionada do vetor (define como 0),
     * e atualiza a lista na interface gráfica.
     */
    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        // TODO add your handling code here:
        // Obtém o índice do elemento selecionado na lista
        int indiceVet = lstVetor.getAnchorSelectionIndex();
        // Atribui o valor do spinner à posição selecionada no vetor
        lblTextoSelecao.setText(Integer.toString(indiceVet));
        //adicionado 0 na posição escolhida. 
        vet[indiceVet]= 0;
        //remoção de todos os elementos da lista
        lista.removeAllElements();
         // Atualiza a lista de elementos exibida na interface gráfica
        for(int i = 0; i < vet.length; i++){
            lista.addElement("["+i+"] <=> " + vet[i]);
        }
        lstVetor.setModel(lista);
        
    }//GEN-LAST:event_btnRemoverActionPerformed
    /**
     * Método chamado ao pressionar o botão de ordenar em ordem decrescente.
     * Ordena os elementos do vetor em ordem decrescente e atualiza a lista na interface gráfica.
     */
    private void btnOrdenarDecrecenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarDecrecenteActionPerformed
        // TODO add your handling code here:
         // Ordena o vetor em ordem crescente
        Arrays.sort(vet);
        //Cria uma copia do vetor em ordem decrescente; 
        int vetCopia[] = new int[vet.length];
        for (int i = 0; i < vet.length; i++) {
            vetCopia[i] = vet[vet.length - 1 - i]; // Re-adiciona os elementos decrescentes 
        }
        //limpa a lista.
        lista.removeAllElements();
        for(int i = 0; i < vetCopia.length; i++){
            lista.addElement("["+i+"] <=> " + vetCopia[i]);
        }
        lstVetor.setModel(lista);
        
    }//GEN-LAST:event_btnOrdenarDecrecenteActionPerformed
    
     /**
     * Método chamado ao clicar em um item da lista.
     * Exibe o índice do item selecionado.
     */
    private void lstVetorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstVetorMouseClicked
        // TODO add your handling code here:
         // Obtém o índice do item selecionado na lista
        int indiceVet = lstVetor.getAnchorSelectionIndex();
         // Exibe o índice selecionado
        lblTextoSelecao.setText(Integer.toString(indiceVet));
    }//GEN-LAST:event_lstVetorMouseClicked
    
      /**
     * Método chamado ao pressionar o botão de ordenar em ordem crescente.
     * Ordena os elementos do vetor em ordem crescente e atualiza a lista na interface gráfica.
     */
    private void btnOrdenarCrescenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarCrescenteActionPerformed
        // TODO add your handling code here:
        //ordena o vetor em ordem crescente. 
        Arrays.sort(vet);
        lista.removeAllElements();
        // Atualiza a lista de elementos exibida na interface gráfica
        for(int i = 0; i < vet.length; i++){
            // Re-adiciona os elementos ordenados
            lista.addElement("["+i+"] <=> " + vet[i]);
        }
        lstVetor.setModel(lista);
    }//GEN-LAST:event_btnOrdenarCrescenteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vetor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vetor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vetor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vetor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vetor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnOrdenarCrescente;
    private javax.swing.JButton btnOrdenarDecrecente;
    private javax.swing.JButton btnRemover;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTextoSelecao;
    private javax.swing.JLabel lblTextoVetor;
    private javax.swing.JList<String> lstVetor;
    private javax.swing.JSpinner spnNumEscolhido;
    // End of variables declaration//GEN-END:variables
}
